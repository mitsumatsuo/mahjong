import type { NextPage } from "next";
import Head from "next/head";
import { useCallback, useState } from "react";

type User = {
  id: number;
  name: string;
  checked: boolean;
};

type Match = {
  id: number;
  name: string;
  users: string[];
};

const removeDup = (value: Match[]): Match[] => {
  let ret: Match[] = [];

  value.forEach((i) => {
    let f = ret.find((r) => r.id === i.id);
    if (!f) {
      ret.push(i);
    }
  });

  ret.sort((a, b) => (a.id < b.id ? -1 : 1));

  return ret;
};

const countAvailableMemberCount = (
  users: User[],
  targetMembers: string[]
): number => {
  let n = 0;
  targetMembers.forEach((mem) => {
    const found = users.find((user) => user.name === mem);
    if (found && found.checked) {
      n++;
    }
  });
  return n;
};

const defaultUsers: User[] = [
  { id: 0, name: "橋本", checked: false },
  { id: 1, name: "藤田", checked: false },
  { id: 2, name: "渡辺", checked: false },
  { id: 3, name: "松尾", checked: false },
  { id: 4, name: "中川", checked: false },
  { id: 5, name: "小林", checked: false },
  { id: 6, name: "林", checked: false },
  { id: 7, name: "中山", checked: false },
  { id: 8, name: "高須賀", checked: false },
  { id: 9, name: "宮地", checked: false },
];

const matches = [
  { id: 0, name: "🀙", users: ["橋本", "藤田", "松尾", "林"] },
  { id: 1, name: "🀚", users: ["藤田", "渡辺", "中川", "中山"] },
  { id: 2, name: "🀛", users: ["渡辺", "松尾", "小林", "高須賀"] },
  { id: 3, name: "🀜", users: ["松尾", "中川", "林", "宮地"] },
  { id: 4, name: "🀝", users: ["中川", "小林", "中山", "橋本"] },
  { id: 5, name: "🀞", users: ["小林", "林", "高須賀", "藤田"] },
  { id: 6, name: "🀟", users: ["林", "中山", "宮地", "渡辺"] },
  { id: 7, name: "🀠", users: ["中山", "高須賀", "橋本", "松尾"] },
  { id: 8, name: "🀡", users: ["高須賀", "宮地", "藤田", "中川"] },
  { id: 9, name: "🀃", users: ["宮地", "橋本", "渡辺", "小林"] },
];

const title = "競技まぁじゃん部";

const Home: NextPage = () => {
  const [users, setUsers] = useState(defaultUsers);
  const [filteredMatches, setFilteredMatches] = useState(matches);

  const clickClearEventHandler = useCallback(() => {
    setUsers((s) => {
      return s.map((ss) => {
        return {
          ...ss,
          checked: false,
        };
      });
    });
  }, []);

  const clickEventHandler = useCallback((e: User) => {
    e.checked = !e.checked;
    setUsers((old) => [
      ...old.filter((user) => user.id < e.id),
      e,
      ...old.filter((user) => user.id > e.id),
    ]);
  }, []);

  // useEffect(() => {
  //   let availableMatches: Match[] = [];
  //   users.forEach((user) => {
  //     if (user.checked) {
  //       const newValue = matches.filter((m) => m.users.includes(user.name));
  //       availableMatches.push(...newValue);
  //     }
  //   });

  //   setFilteredMatches(removeDup(availableMatches.length === 0 ? matches : availableMatches));
  // }, [users, setFilteredMatches]);

  return (
    <div className="bg-gradient-to-br from-green-800/90 via-green-800/90 to-green-800/90 select-none min-h-screen">
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="">
        <h1 className="font-bold text-2xl bg-gradient-to-r from-rose-500 via-rose-400 to-rose-300 text-white p-1">
          {title}🀇🀇🀇🀈🀉🀊🀋🀋🀌🀍🀎🀏🀏🀏
        </h1>
        <div className="p-2">
          <div className="">
            <span className="font-bold text-white text-base">メンバー</span>
          </div>
          <div className="flex space-x-1 sm:space-x-2 md:space-x-3 2xl:space-x-4 items-center font-serif">
            {users.map((user) => {
              return user.checked ? (
                <div
                  key={user.id}
                  className="bg-white font-bold text-[red] text-center px-2 2xl:px-4 rounded-md border-2 border-black cursor-pointer shadow shadow-blue-500 w-10 h-16 2xl:w-16 2xl:h-20 flex justify-center items-center text-xl 2xl:text-2xl"
                  onClick={() => clickEventHandler(user)}
                >
                  {user.name}
                </div>
              ) : (
                <div
                  key={user.id}
                  className="bg-blue-500 text-blue-50 text-center px-2 2xl:px-4 rounded-md border-2 border-black cursor-pointer shadow shadow-blue-500 w-10 h-16 2xl:w-16 2xl:h-20 flex justify-center items-center text-xl 2xl:text-2xl"
                  onClick={() => clickEventHandler(user)}
                >
                  {user.name}
                </div>
              );
            })}
            {users.some((user) => user.checked) ? (
              <div
                className="bg-yellow-500 text-yellow-50 text-center whitespace-nowrap px-4 rounded border border-yellow-500 select-none cursor-pointer shadow shadow-yellow-500 uppercase"
                onClick={() => clickClearEventHandler()}
              >
                流局
              </div>
            ) : (
              <></>
            )}
          </div>
          <hr className="my-3" />
          <div className="font-bold text-white text-base">マッチング状況</div>
          <div className="w-full grid grid-cols-2 sm:grid-cols-3 xl:grid-cols-4 grid-flow-row gap-1 md:gap-1 lg:gap-2 2xl:gap-4">
            {filteredMatches.map((match) => {
              const numOfAvailable = countAvailableMemberCount(
                users,
                match.users
              );
              return (
                <div
                  key={match.id}
                  className="w-[180px] 2xl:w-[300px] h-[180px] 2xl:h-[300px] 2xl:m-8 2xl:p-8 rounded-lg border-2 2xl:border-8 border-green-900 bg-[green]"
                >
                  <div className="flex justify-between items-center m-1 2xl:m-4 font-serif">
                    <span className="text-3xl 2xl:text-5xl">{match.name}</span>
                    {numOfAvailable === 4 ? (
                      <span className="text-lg 2xl:text-2xl px-2 2xl:px-4 py-px 2xl:py-1 rounded-md bg-[blue] text-white 2xl:shadow-sm shadow-[blue]/80">
                        聴牌
                      </span>
                    ) : numOfAvailable === 3 ? (
                      <span className="text-lg 2xl:text-2xl px-2 2xl:px-4 py-px 2xl:py-1 rounded-md bg-[orange] text-white 2xl:shadow-sm shadow-[orange]/80">
                        一向聴
                      </span>
                    ) : numOfAvailable === 2 ? (
                      <span className="text-lg 2xl:text-2xl px-2 2xl:px-4 py-px 2xl:py-1 rounded-md bg-rose-500 text-white 2xl:shadow-sm shadow-rose-500/80">
                        二向聴
                      </span>
                    ) : numOfAvailable === 1 ? (
                      <span className="text-lg 2xl:text-2xl px-2 2xl:px-4 py-px 2xl:py-1 rounded-md bg-[brown] text-white 2xl:shadow-sm shadow-[brown]/80">
                        三向聴
                      </span>
                    ) : (
                      <span className="text-lg 2xl:text-2xl px-2 2xl:px-4 py-px 2xl:py-1 rounded-md bg-[purple] text-white 2xl:shadow-sm shadow-[purple]/80">
                        四向聴
                      </span>
                    )}
                  </div>
                  <div className="mt-4 2xl:mt-10 flex justify-between text-center m-2 2xl:m-4 items-center font-serif 2xl:gap-4 tracking-wide">
                    {match.users.map((un) => {
                      let y = users.filter(
                        (user) => user.checked && user.name === un
                      );
                      return y && y.length > 0 ? (
                        <div className="text-2xl 2xl:text-4xl w-16 h-20 text-[orange]">
                          {un}
                        </div>
                      ) : (
                        <div className="text-2xl 2xl:text-4xl w-16 h-20 text-slate-400">
                          {un}
                        </div>
                      );
                    })}
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </main>
    </div>
  );
};

export default Home;
